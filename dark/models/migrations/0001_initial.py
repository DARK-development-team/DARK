# Generated by Django 3.2.2 on 2021-05-12 16:44

import dark.common.models.fields
import dark.models.tournament.team.bot.bot
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('repo', dark.common.models.fields.GitRepoField(unique=True)),
                ('package_to_run', models.CharField(max_length=30)),
                ('platform_relative_wd', models.CharField(default='.', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
            ],
            options={
                'ordering': ['tournament', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_private', models.BooleanField(default=False)),
                ('access_key', models.IntegerField(default=8462, editable=False)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creator', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='participants', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentRound',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.platform')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='TeamRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('can_modify_members', models.BooleanField(default=False)),
                ('can_remove', models.BooleanField(default=False)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.team')),
            ],
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.teamrole')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['team', 'user'],
            },
        ),
        migrations.CreateModel(
            name='TeamBot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bot_code', models.FileField(default=None, max_length=65535, upload_to=dark.models.tournament.team.bot.bot.bot_code_upload_path)),
                ('bot_class_name', models.CharField(default=None, max_length=30)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.team')),
                ('tround', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.tournamentround')),
            ],
            options={
                'ordering': ['team', 'tround'],
            },
        ),
        migrations.AddField(
            model_name='team',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.tournament'),
        ),
        migrations.AddConstraint(
            model_name='tournamentround',
            constraint=models.CheckConstraint(check=models.Q(('start_date__lt', django.db.models.expressions.F('end_date'))), name='round_start_date_lt_end_date'),
        ),
        migrations.AlterUniqueTogether(
            name='tournamentround',
            unique_together={('tournament', 'name')},
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(check=models.Q(('start_date__lt', django.db.models.expressions.F('end_date'))), name='tournament_start_date_lt_end_date'),
        ),
        migrations.AlterUniqueTogether(
            name='tournament',
            unique_together={('name', 'creator')},
        ),
        migrations.AlterUniqueTogether(
            name='teamrole',
            unique_together={('team', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='teammember',
            unique_together={('team', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='teambot',
            unique_together={('team', 'tround')},
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('tournament', 'name')},
        ),
    ]
