import importlib
import importlib.util
import uuid
from typing import Any

# edited by external python script
# format (tournament_name, queue_name)
meta = tuple[str, str]()
# format [(controller_path, controller_symbol (class), team_name), ...]
controllers = list[tuple[str, str, str]]()
# extra config params
# python dictionary
extra_config = dict[str, Any]()
# end external editor


def load_controller_module(module_path: str):
    spec = importlib.util.spec_from_file_location(f'{uuid.uuid4()}', module_path)
    controller_module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(controller_module)
    return controller_module


def load_controller_class(controller_module, controller_class_name: str):
    return getattr(controller_module, controller_class_name)


def create_controllers(controllers):
    controllers_objects = [
        load_controller_class(
            load_controller_module(controller_module_path),
            controller_class_name
        )(f'{{{meta[0]}-{meta[1]}}}: {team_name}')
        for controller_module_path, controller_class_name, team_name in controllers
    ]
    return controllers_objects


def create_configuration(controllers, extra_config):
    configuration = dict()
    configuration.update(extra_config)
    configuration['controllers'] = create_controllers(controllers)
    return configuration


CONFIGURATION = create_configuration(controllers, extra_config)
